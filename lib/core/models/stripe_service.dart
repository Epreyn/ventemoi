import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:get/get.dart';
import 'package:url_launcher/url_launcher.dart';

class StripeService extends GetxService {
  static StripeService get to => Get.find();

  final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  final FirebaseAuth _auth = FirebaseAuth.instance;

  // Prix IDs Stripe (√† adapter selon votre configuration)
  static const String PRICE_ID_MONTHLY_FIRST_YEAR =
      'price_1ReLkQPLJZjht3nFComM7tLk';
  static const String PRICE_ID_MONTHLY_RECURRING =
      'price_1ReLlFPLJZjht3nFjMOlVjqG';
  static const String PRICE_ID_ANNUAL_FIRST_YEAR =
      'price_1ReLhpPLJZjht3nFtCCeJXQp';
  static const String PRICE_ID_ANNUAL_RECURRING =
      'price_1ReLjHPLJZjht3nFi2tzqXWu';
  static const String PRICE_ID_ADDITIONAL_SLOT =
      'price_1RjMd0PLJZjht3nFtfGuQWVu';

  // Cr√©er ou r√©cup√©rer un customer Stripe
  Future<String> _ensureStripeCustomer() async {
    final user = _auth.currentUser;
    if (user == null) throw Exception('Utilisateur non connect√©');

    print('üîµ V√©rification du customer Stripe pour: ${user.email}');

    // V√©rifier si le customer existe d√©j√†
    DocumentSnapshot customerDoc =
        await _firestore.collection('customers').doc(user.uid).get();

    // Si le document n'existe pas, le cr√©er
    if (!customerDoc.exists) {
      print('üìù Cr√©ation du document customer...');
      await _firestore.collection('customers').doc(user.uid).set({
        'email': user.email ?? '',
        'created': FieldValue.serverTimestamp(),
      });

      // Attendre un peu pour que l'extension traite la cr√©ation
      await Future.delayed(const Duration(seconds: 3));

      // R√©cup√©rer le document mis √† jour
      customerDoc =
          await _firestore.collection('customers').doc(user.uid).get();
    }

    // Attendre que l'extension ajoute le stripeId
    String? stripeId;
    int attempts = 0;
    const maxAttempts = 10;

    while (attempts < maxAttempts) {
      if (customerDoc.exists) {
        final data = customerDoc.data() as Map<String, dynamic>?;
        stripeId = data?['stripeId'];

        if (stripeId != null && stripeId.isNotEmpty) {
          print('‚úÖ Customer Stripe trouv√©: $stripeId');
          return user.uid;
        }
      }

      attempts++;
      print('‚è≥ Attente du stripeId... Tentative $attempts/$maxAttempts');
      await Future.delayed(const Duration(seconds: 2));

      // Recharger le document
      customerDoc =
          await _firestore.collection('customers').doc(user.uid).get();
    }

    // Si on arrive ici, le stripeId n'a pas √©t√© cr√©√©
    throw Exception('''
    Le customer Stripe n'a pas pu √™tre cr√©√©.
    V√©rifiez que :
    1. L'extension Stripe est correctement install√©e
    2. La cl√© API Stripe est configur√©e
    3. L'option "Sync new users" est activ√©e dans l'extension
    ''');
  }

  // Dans StripeService - Remplacer la m√©thode createMonthlyOptionCheckout

  // Dans StripeService - Remplacer createMonthlyOptionCheckout et createMonthlyOptionCheckoutWithId

  // Cr√©er une session de checkout pour l'option mensuelle
  // NOUVELLE VERSION : Affiche les deux montants sur la page de checkout
  Future<String?> createMonthlyOptionCheckout({
    required String userType,
    required String successUrl,
    required String cancelUrl,
  }) async {
    try {
      print(
          'üîµ Cr√©ation checkout mensuel pour user: ${_auth.currentUser?.uid}');

      final customerId = await _ensureStripeCustomer();

      final successUrlWithAutoClose =
          'https://app.ventemoi.fr/stripe-success.html';
      final cancelUrlWithAutoClose =
          'https://app.ventemoi.fr/stripe-cancel.html';

      // IMPORTANT : On utilise le mode "subscription" mais on ajoute les deux items visibles
      final checkoutData = {
        'mode': 'subscription',
        'success_url': successUrlWithAutoClose,
        'cancel_url': cancelUrlWithAutoClose,
        'line_items': [
          // 1. Frais d'adh√©sion (visible sur la page de checkout)
          {
            'price_data': {
              'currency': 'eur',
              'product_data': {
                'name': 'Frais d\'adh√©sion VenteMoi (unique)',
                'description': 'Acc√®s √† la plateforme pour votre √©tablissement',
              },
              'unit_amount': 27000, // 270‚Ç¨
              'recurring': null, // Pas r√©current
            },
            'quantity': 1,
          },
          // 2. Abonnement mensuel
          {
            'price': PRICE_ID_MONTHLY_RECURRING, // 55‚Ç¨/mois
            'quantity': 1,
          }
        ],
        'subscription_data': {
          'metadata': {
            'user_type': userType,
            'user_id': customerId,
            'subscription_type': 'monthly_with_setup',
            'setup_fee_paid': 'true',
          },
        },
        'metadata': {
          'purchase_type': 'first_year_monthly',
          'user_type': userType,
          'user_id': customerId,
          'includes_setup_fee': 'true',
          'setup_fee_amount': '270',
        },
        'allow_promotion_codes': true,
      };

      print('üîµ Donn√©es checkout: $checkoutData');

      final sessionRef = await _firestore
          .collection('customers')
          .doc(customerId)
          .collection('checkout_sessions')
          .add(checkoutData);

      print('üîµ Session cr√©√©e avec ID: ${sessionRef.id}');

      return await _waitForCheckoutUrl(customerId, sessionRef.id);
    } catch (e) {
      print('‚ùå Erreur cr√©ation checkout mensuel: $e');
      rethrow;
    }
  }

  // Version avec ID
  Future<Map<String, String>?> createMonthlyOptionCheckoutWithId({
    required String userType,
    required String successUrl,
    required String cancelUrl,
  }) async {
    try {
      print(
          'üîµ Cr√©ation checkout mensuel avec ID pour user: ${_auth.currentUser?.uid}');

      final customerId = await _ensureStripeCustomer();

      final successUrlWithAutoClose =
          'https://app.ventemoi.fr/stripe-success.html';
      final cancelUrlWithAutoClose =
          'https://app.ventemoi.fr/stripe-cancel.html';

      final checkoutData = {
        'mode': 'subscription',
        'success_url': successUrlWithAutoClose,
        'cancel_url': cancelUrlWithAutoClose,
        'line_items': [
          // Frais d'adh√©sion visibles
          {
            'price_data': {
              'currency': 'eur',
              'product_data': {
                'name': 'Frais d\'adh√©sion VenteMoi (unique)',
                'description': 'Acc√®s √† la plateforme pour votre √©tablissement',
              },
              'unit_amount': 27000, // 270‚Ç¨
            },
            'quantity': 1,
          },
          // Abonnement mensuel
          {
            'price': PRICE_ID_MONTHLY_RECURRING, // 55‚Ç¨/mois
            'quantity': 1,
          }
        ],
        'subscription_data': {
          'metadata': {
            'user_type': userType,
            'user_id': customerId,
            'subscription_type': 'monthly_with_setup',
          },
        },
        'metadata': {
          'purchase_type': 'first_year_monthly',
          'user_type': userType,
          'user_id': customerId,
          'includes_setup_fee': 'true',
        },
        'allow_promotion_codes': true,
        'created': FieldValue.serverTimestamp(),
      };

      final sessionRef = await _firestore
          .collection('customers')
          .doc(customerId)
          .collection('checkout_sessions')
          .add(checkoutData);

      final sessionId = sessionRef.id;
      print('üîµ Session cr√©√©e avec ID: $sessionId');

      final url = await _waitForCheckoutUrl(customerId, sessionId);

      if (url != null) {
        return {
          'url': url,
          'sessionId': sessionId,
        };
      }

      return null;
    } catch (e) {
      print('‚ùå Erreur cr√©ation checkout mensuel: $e');
      rethrow;
    }
  }

  // Version alternative si vous voulez utiliser un seul prix de 325‚Ç¨ pour le premier mois
  // (270‚Ç¨ adh√©sion + 55‚Ç¨ premier mois) puis 55‚Ç¨/mois
  Future<String?> createMonthlyOptionCheckoutAlternative({
    required String userType,
    required String successUrl,
    required String cancelUrl,
  }) async {
    try {
      print(
          'üîµ Cr√©ation checkout mensuel alternatif pour user: ${_auth.currentUser?.uid}');

      final customerId = await _ensureStripeCustomer();

      final successUrlWithAutoClose =
          'https://app.ventemoi.fr/stripe-success.html';
      final cancelUrlWithAutoClose =
          'https://app.ventemoi.fr/stripe-cancel.html';

      // Cr√©er un abonnement avec un prix sp√©cial pour le premier mois
      final checkoutData = {
        'mode': 'subscription',
        'success_url': successUrlWithAutoClose,
        'cancel_url': cancelUrlWithAutoClose,
        'line_items': [
          {
            'price': PRICE_ID_MONTHLY_RECURRING, // 55‚Ç¨/mois
            'quantity': 1,
          }
        ],
        'subscription_data': {
          // Ajouter les frais d'adh√©sion comme √©l√©ment unique sur la premi√®re facture
          'add_invoice_items': [
            {
              'price_data': {
                'currency': 'eur',
                'product_data': {
                  'name': 'Frais d\'adh√©sion VenteMoi',
                },
                'unit_amount': 27000, // 270‚Ç¨ en centimes
              },
              'quantity': 1,
            }
          ],
          'metadata': {
            'user_type': userType,
            'user_id': customerId,
            'subscription_type': 'monthly',
          },
        },
        'metadata': {
          'purchase_type': 'first_year_monthly',
          'user_type': userType,
          'user_id': customerId,
        },
        'allow_promotion_codes': true,
      };

      print('üîµ Donn√©es checkout: $checkoutData');

      // Cr√©er la session de checkout
      final sessionRef = await _firestore
          .collection('customers')
          .doc(customerId)
          .collection('checkout_sessions')
          .add(checkoutData);

      print('üîµ Session cr√©√©e avec ID: ${sessionRef.id}');

      // Attendre que l'URL soit g√©n√©r√©e
      return await _waitForCheckoutUrl(customerId, sessionRef.id);
    } catch (e) {
      print('‚ùå Erreur cr√©ation checkout mensuel: $e');
      rethrow;
    }
  }

  // Cr√©er une session de checkout pour l'option annuelle
  Future<String?> createAnnualOptionCheckout({
    required String userType,
    required String successUrl,
    required String cancelUrl,
  }) async {
    try {
      print('üîµ Cr√©ation checkout annuel pour user: ${_auth.currentUser?.uid}');

      final customerId = await _ensureStripeCustomer();

      // URLs de redirection avec auto-fermeture
      final successUrlWithAutoClose =
          'https://app.ventemoi.fr/stripe-success.html';
      final cancelUrlWithAutoClose =
          'https://app.ventemoi.fr/stripe-cancel.html';

      // Donn√©es de la session
      final checkoutData = {
        'mode': 'payment',
        'success_url': successUrlWithAutoClose,
        'cancel_url': cancelUrlWithAutoClose,
        'line_items': [
          {
            'price': PRICE_ID_ANNUAL_FIRST_YEAR,
            'quantity': 1,
          }
        ],
        'metadata': {
          'purchase_type': 'first_year_annual',
          'user_type': userType,
          'user_id': customerId,
          'needs_future_subscription':
              'true', // Utiliser string au lieu de bool
          'future_price_id': PRICE_ID_ANNUAL_RECURRING,
        },
        'allow_promotion_codes': true,
      };

      print('üîµ Donn√©es checkout: $checkoutData');

      // Cr√©er la session de checkout
      final sessionRef = await _firestore
          .collection('customers')
          .doc(customerId)
          .collection('checkout_sessions')
          .add(checkoutData);

      print('üîµ Session cr√©√©e avec ID: ${sessionRef.id}');

      // Attendre que l'URL soit g√©n√©r√©e
      return await _waitForCheckoutUrl(customerId, sessionRef.id);
    } catch (e) {
      print('‚ùå Erreur cr√©ation checkout annuel: $e');
      rethrow;
    }
  }

  // Cr√©er une session de checkout pour l'option annuelle (avec ID)
  Future<Map<String, String>?> createAnnualOptionCheckoutWithId({
    required String userType,
    required String successUrl,
    required String cancelUrl,
  }) async {
    try {
      print(
          'üîµ Cr√©ation checkout annuel avec ID pour user: ${_auth.currentUser?.uid}');

      final customerId = await _ensureStripeCustomer();

      // URLs de redirection avec auto-fermeture
      final successUrlWithAutoClose =
          'https://app.ventemoi.fr/stripe-success.html';
      final cancelUrlWithAutoClose =
          'https://app.ventemoi.fr/stripe-cancel.html';

      // Donn√©es de la session
      final checkoutData = {
        'mode': 'payment',
        'success_url': successUrlWithAutoClose,
        'cancel_url': cancelUrlWithAutoClose,
        'line_items': [
          {
            'price': PRICE_ID_ANNUAL_FIRST_YEAR,
            'quantity': 1,
          }
        ],
        'metadata': {
          'purchase_type': 'first_year_annual',
          'user_type': userType,
          'user_id': customerId,
          'needs_future_subscription': 'true',
          'future_price_id': PRICE_ID_ANNUAL_RECURRING,
        },
        'allow_promotion_codes': true,
        'created': FieldValue.serverTimestamp(),
      };

      // Cr√©er la session de checkout
      final sessionRef = await _firestore
          .collection('customers')
          .doc(customerId)
          .collection('checkout_sessions')
          .add(checkoutData);

      final sessionId = sessionRef.id;
      print('üîµ Session cr√©√©e avec ID: $sessionId');

      // Attendre que l'URL soit g√©n√©r√©e
      final url = await _waitForCheckoutUrl(customerId, sessionId);

      if (url != null) {
        return {
          'url': url,
          'sessionId': sessionId,
        };
      }

      return null;
    } catch (e) {
      print('‚ùå Erreur cr√©ation checkout annuel: $e');
      rethrow;
    }
  }

  // Attendre que l'URL de checkout soit g√©n√©r√©e par l'extension Stripe
  Future<String?> _waitForCheckoutUrl(
      String customerId, String sessionId) async {
    print('‚è≥ En attente de l\'URL de checkout...');

    const maxAttempts = 20;
    const delayBetweenAttempts = Duration(seconds: 2);

    for (int i = 0; i < maxAttempts; i++) {
      try {
        final sessionDoc = await _firestore
            .collection('customers')
            .doc(customerId)
            .collection('checkout_sessions')
            .doc(sessionId)
            .get();

        if (sessionDoc.exists) {
          final data = sessionDoc.data()!;

          // Debug: afficher les champs disponibles
          print(
              'üîç Tentative ${i + 1}/$maxAttempts - Data: ${data.keys.join(', ')}');

          // V√©rifier si l'extension a ajout√© une erreur
          if (data.containsKey('error')) {
            final error = data['error'];
            print('‚ùå Erreur Stripe: $error');
            throw Exception('Erreur Stripe: ${error['message'] ?? error}');
          }

          // L'extension Stripe ajoute le champ 'url' automatiquement
          if (data.containsKey('url') && data['url'] != null) {
            final url = data['url'] as String;
            print('‚úÖ URL de checkout obtenue: $url');
            return url;
          }

          // V√©rifier aussi sessionId (certaines versions utilisent ce champ)
          if (data.containsKey('sessionId') && data['sessionId'] != null) {
            // Construire l'URL manuellement si n√©cessaire
            final sessionId = data['sessionId'] as String;
            final url = 'https://checkout.stripe.com/pay/$sessionId';
            print('‚úÖ URL construite depuis sessionId: $url');
            return url;
          }
        }

        await Future.delayed(delayBetweenAttempts);
      } catch (e) {
        print('‚ùå Erreur lors de la v√©rification: $e');
        if (i == maxAttempts - 1) rethrow;
      }
    }

    // Si on arrive ici, c'est qu'on a d√©pass√© le timeout
    // Essayer de r√©cup√©rer plus d'infos pour le debug
    final sessionDoc = await _firestore
        .collection('customers')
        .doc(customerId)
        .collection('checkout_sessions')
        .doc(sessionId)
        .get();

    final debugData =
        sessionDoc.exists ? sessionDoc.data() : 'Document non trouv√©';

    throw Exception('''
Timeout: URL de checkout non g√©n√©r√©e.
√âtat final: $debugData

V√©rifiez que:
1. L'extension Stripe est correctement install√©e et configur√©e
2. Les Cloud Functions de l'extension sont actives
3. Les prix Stripe existent et sont actifs dans votre dashboard
4. Le webhook Stripe est correctement configur√©
5. La cl√© API Stripe a les permissions n√©cessaires
''');
  }

  // Lancer l'URL de checkout dans le navigateur
  Future<void> launchCheckout(String checkoutUrl) async {
    final uri = Uri.parse(checkoutUrl);

    if (await canLaunchUrl(uri)) {
      await launchUrl(
        uri,
        mode: LaunchMode.externalApplication,
        webOnlyWindowName: '_blank', // ‚Üê Ouverture dans un nouvel onglet
      );
    } else {
      throw Exception('Impossible d\'ouvrir l\'URL de checkout');
    }
  }

  // V√©rifier le statut de l'abonnement
  Future<Map<String, dynamic>?> checkSubscriptionStatus() async {
    final user = _auth.currentUser;
    if (user == null) return null;

    try {
      final customerDoc =
          await _firestore.collection('customers').doc(user.uid).get();

      if (customerDoc.exists) {
        final subscriptions = await _firestore
            .collection('customers')
            .doc(user.uid)
            .collection('subscriptions')
            .where('status', whereIn: ['trialing', 'active'])
            .limit(1)
            .get();

        if (subscriptions.docs.isNotEmpty) {
          return subscriptions.docs.first.data();
        }
      }
    } catch (e) {
      print('Erreur v√©rification abonnement: $e');
    }

    return null;
  }

  // ==== NOUVELLES M√âTHODES POUR PAYMENT LISTENER ====

  // √âcouter les sessions de paiement
  Stream<QuerySnapshot> listenToPaymentSessions(String userId) {
    return _firestore
        .collection('customers')
        .doc(userId)
        .collection('checkout_sessions')
        .where('payment_status', isEqualTo: 'paid')
        .snapshots();
  }

  // G√©rer un paiement r√©ussi
  Future<void> handleSuccessfulPayment(DocumentSnapshot sessionDoc) async {
    try {
      final sessionData = sessionDoc.data() as Map<String, dynamic>;
      final metadata = sessionData['metadata'] as Map<String, dynamic>?;

      if (metadata == null) return;

      final userId = metadata['user_id'] as String?;
      final purchaseType = metadata['purchase_type'] as String?;
      final paymentType = metadata['type'] as String?;

      print('üéâ Traitement du paiement r√©ussi: $purchaseType / $paymentType');

      // Trouver l'√©tablissement
      final estabQuery = await _firestore
          .collection('establishments')
          .where('user_id', isEqualTo: userId)
          .limit(1)
          .get();

      if (estabQuery.docs.isEmpty) {
        print('‚ùå Aucun √©tablissement trouv√© pour l\'utilisateur: $userId');
        return;
      }

      final establishmentId = estabQuery.docs.first.id;
      final establishmentRef =
          _firestore.collection('establishments').doc(establishmentId);

      // Traiter selon le type de paiement
      if (purchaseType == 'first_year_annual' ||
          purchaseType == 'first_year_monthly') {
        // Activer l'abonnement
        await establishmentRef.update({
          'has_accepted_contract': true,
          'has_active_subscription': true,
          'subscription_status':
              purchaseType == 'first_year_annual' ? 'annual' : 'monthly',
          'subscription_start_date': FieldValue.serverTimestamp(),
          'subscription_end_date':
              Timestamp.fromDate(DateTime.now().add(const Duration(days: 365))),
          'payment_session_id': sessionDoc.id,
          'temporary_mode': false, // Retirer le mode temporaire
        });

        // Cr√©er le bon cadeau de bienvenue
        await _createWelcomeGiftVoucher(establishmentId);

        print('‚úÖ Abonnement activ√© pour l\'√©tablissement: $establishmentId');
      } else if (paymentType == 'additional_category_slot') {
        // Ajouter un slot de cat√©gorie
        final currentSlots = (await establishmentRef.get())
                .data()?['enterprise_category_slots'] ??
            2;

        await establishmentRef.update({
          'enterprise_category_slots': currentSlots + 1,
        });

        print('‚úÖ Slot de cat√©gorie ajout√©. Total: ${currentSlots + 1}');
      }

      // Marquer la session comme trait√©e
      await sessionDoc.reference.update({
        'processed': true,
        'processed_at': FieldValue.serverTimestamp(),
      });
    } catch (e) {
      print('‚ùå Erreur lors du traitement du paiement: $e');
      rethrow;
    }
  }

  // Cr√©er un bon cadeau de bienvenue
  Future<void> _createWelcomeGiftVoucher(String establishmentId) async {
    try {
      // Cr√©er le bon cadeau
      await _firestore.collection('gift_vouchers').add({
        'establishment_id': establishmentId,
        'amount': 50.0,
        'type': 'welcome',
        'status': 'active',
        'created_at': FieldValue.serverTimestamp(),
        'expires_at':
            Timestamp.fromDate(DateTime.now().add(const Duration(days: 365))),
        'code': 'WELCOME-${DateTime.now().millisecondsSinceEpoch}',
      });

      print('üéÅ Bon cadeau de bienvenue cr√©√©');
    } catch (e) {
      print('‚ùå Erreur cr√©ation bon cadeau: $e');
    }
  }

  // Cr√©er une session de paiement pour un slot additionnel
  Future<String?> createAdditionalSlotCheckout({
    required String successUrl,
    required String cancelUrl,
  }) async {
    try {
      final customerId = await _ensureStripeCustomer();

      final successUrlWithAutoClose =
          'https://app.ventemoi.fr/stripe-success.html';
      final cancelUrlWithAutoClose =
          'https://app.ventemoi.fr/stripe-cancel.html';

      final checkoutData = {
        'mode': 'subscription',
        'success_url': successUrlWithAutoClose,
        'cancel_url': cancelUrlWithAutoClose,
        'line_items': [
          {
            'price': PRICE_ID_ADDITIONAL_SLOT,
            'quantity': 1,
          }
        ],
        'metadata': {
          'type': 'additional_category_slot',
          'user_id': customerId,
          'purchase_type': 'category_slot',
        },
        'allow_promotion_codes': true,
      };

      final sessionRef = await _firestore
          .collection('customers')
          .doc(customerId)
          .collection('checkout_sessions')
          .add(checkoutData);

      return await _waitForCheckoutUrl(customerId, sessionRef.id);
    } catch (e) {
      print('‚ùå Erreur cr√©ation checkout slot: $e');
      rethrow;
    }
  }

  // Dans stripe_service.dart
  Future<Map<String, String>?> createAdditionalSlotCheckoutWithId({
    required String successUrl,
    required String cancelUrl,
  }) async {
    try {
      final customerId = await _ensureStripeCustomer();

      final successUrlWithAutoClose =
          'https://app.ventemoi.fr/stripe-success.html';
      final cancelUrlWithAutoClose =
          'https://app.ventemoi.fr/stripe-cancel.html';

      final checkoutData = {
        'mode': 'payment',
        'success_url': successUrlWithAutoClose,
        'cancel_url': cancelUrlWithAutoClose,
        'line_items': [
          {
            'price_data': {
              'currency': 'eur',
              'product_data': {
                'name': 'Slot de cat√©gorie suppl√©mentaire',
                'description':
                    'Acc√®s √† une cat√©gorie d\'entreprise suppl√©mentaire',
              },
              'unit_amount': 5000, // 50‚Ç¨
            },
            'quantity': 1,
          }
        ],
        'metadata': {
          'type': 'additional_category_slot',
          'user_id': customerId,
          'purchase_type': 'category_slot',
        },
        'allow_promotion_codes': true,
      };

      final sessionRef = await _firestore
          .collection('customers')
          .doc(customerId)
          .collection('checkout_sessions')
          .add(checkoutData);

      final sessionId = sessionRef.id;
      final url = await _waitForCheckoutUrl(customerId, sessionId);

      if (url != null) {
        return {
          'url': url,
          'sessionId': sessionId,
        };
      }

      return null;
    } catch (e) {
      print('‚ùå Erreur cr√©ation checkout slot: $e');
      rethrow;
    }
  }

  // M√©thode de debug pour v√©rifier la configuration
  Future<void> debugStripeSetup() async {
    print('\nüîç === DEBUG STRIPE SETUP ===\n');

    final user = _auth.currentUser;
    if (user == null) {
      print('‚ùå Aucun utilisateur connect√©');
      return;
    }

    print('üë§ Utilisateur: ${user.uid}');
    print('üìß Email: ${user.email}');

    // V√©rifier le customer
    final customerDoc =
        await _firestore.collection('customers').doc(user.uid).get();

    if (customerDoc.exists) {
      final data = customerDoc.data()!;
      print('\n‚úÖ Document customer existe:');
      print('   - stripeId: ${data['stripeId'] ?? 'NON D√âFINI'}');
      print('   - email: ${data['email']}');
      print('   - created: ${data['created']}');

      if (data['stripeId'] == null) {
        print('\n‚ö†Ô∏è  ATTENTION: Le stripeId est manquant!');
        print('   L\'extension Stripe n\'a pas cr√©√© le customer.');
        print('   V√©rifiez la configuration de l\'extension.');
      }
    } else {
      print('\n‚ùå Document customer n\'existe pas');
    }

    print('\n=== FIN DEBUG ===\n');
  }

  // M√©thode de diagnostic pour tester les Cloud Functions
  Future<void> testCloudFunction() async {
    final user = FirebaseAuth.instance.currentUser;
    if (user == null) return;

    print('üß™ Test Cloud Function...');

    // Supprimer l'ancien document s'il existe
    final ref =
        FirebaseFirestore.instance.collection('customers').doc(user.uid);

    await ref.delete();
    print('üóëÔ∏è Ancien document supprim√©');

    // Cr√©er un nouveau document
    await ref.set({
      'email': user.email!,
      'created': FieldValue.serverTimestamp(),
    });

    print('üìù Nouveau document cr√©√©');
    print('‚è≥ Attente de la Cloud Function...');

    // Attendre et v√©rifier
    for (int i = 0; i < 10; i++) {
      await Future.delayed(Duration(seconds: 2));

      final doc = await ref.get();
      if (doc.exists) {
        final data = doc.data()!;
        if (data.containsKey('stripeId')) {
          print('‚úÖ SUCCESS! stripeId: ${data['stripeId']}');
          return;
        }
        if (data.containsKey('error')) {
          print('‚ùå ERREUR: ${data['error']}');
          return;
        }
      }
      print('   Tentative ${i + 1}/10...');
    }

    print('‚è±Ô∏è Timeout - v√©rifiez les logs Cloud Functions');
  }
}
