import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:get/get.dart';
import 'package:url_launcher/url_launcher.dart';
import 'package:cloud_functions/cloud_functions.dart';

class StripeService extends GetxService {
  static StripeService get to => Get.find();

  final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  final FirebaseAuth _auth = FirebaseAuth.instance;

  static const String PRICE_ID_MONTHLY_FIRST_YEAR =
      'price_1RnEnpAOsm6ulZWoaL9qF82e'; // ADHESION + VIDEO
  static const String PRICE_ID_MONTHLY_RECURRING =
      'price_1RnEnmAOsm6ulZWoEjr61X2l';
  static const String PRICE_ID_ANNUAL_FIRST_YEAR =
      'price_1RnEnxAOsm6ulZWoklEwYoXm'; // Pack Premi√®re Ann√©e - Annuel
  static const String PRICE_ID_ANNUAL_RECURRING =
      'price_1RnEnxAOsm6ulZWoklEwYoXm';
  static const String PRICE_ID_ADDITIONAL_SLOT =
      'price_1RnEnjAOsm6ulZWoSj3PQQe6';

  // Modifier _ensureStripeCustomer pour utiliser la synchronisation
  Future<String> _ensureStripeCustomer() async {
    final user = _auth.currentUser;
    if (user == null) throw Exception('Utilisateur non connect√©');

    print('üîµ V√©rification du customer Stripe pour: ${user.email}');

    // Essayer de synchroniser avec Stripe
    final stripeId = await syncStripeCustomer();

    if (stripeId != null) {
      return user.uid; // On retourne l'UID Firebase, pas le stripeId
    }

    // Fallback : s'assurer que le document existe
    await _ensureCustomerDocument(user.uid, user.email!);

    return user.uid;
  }

  // Cr√©er une session checkout SANS r√©f√©rencer un customer ID inexistant
  Future<String?> createMonthlyOptionCheckout({
    required String userType,
    required String successUrl,
    required String cancelUrl,
  }) async {
    try {
      print(
          'üîµ Cr√©ation checkout mensuel pour user: ${_auth.currentUser?.uid}');

      final user = _auth.currentUser;
      if (user == null) throw Exception('Utilisateur non connect√©');

      final successUrlWithAutoClose =
          'https://app.ventemoi.fr/stripe-success.html';
      final cancelUrlWithAutoClose =
          'https://app.ventemoi.fr/stripe-cancel.html';

      // IMPORTANT : Utiliser customer_email au lieu d'un customer ID
      final checkoutData = {
        'mode': 'subscription',
        'customer_email': user.email, // ‚Üê CHANGEMENT CL√â
        'success_url': successUrlWithAutoClose,
        'cancel_url': cancelUrlWithAutoClose,
        'line_items': [
          // 1. Frais d'adh√©sion (visible sur la page de checkout)
          {
            'price_data': {
              'currency': 'eur',
              'product_data': {
                'name': 'Frais d\'adh√©sion VenteMoi (unique)',
                'description': 'Acc√®s √† la plateforme pour votre √©tablissement',
              },
              'unit_amount': 27000, // 270‚Ç¨
              'recurring': null, // Pas r√©current
            },
            'quantity': 1,
          },
          // 2. Abonnement mensuel
          {
            'price': PRICE_ID_MONTHLY_RECURRING, // 55‚Ç¨/mois
            'quantity': 1,
          }
        ],
        'subscription_data': {
          'metadata': {
            'user_type': userType,
            'user_id': user.uid,
            'subscription_type': 'monthly_with_setup',
            'setup_fee_paid': 'true',
          },
        },
        'metadata': {
          'purchase_type': 'first_year_monthly',
          'user_type': userType,
          'user_id': user.uid,
          'includes_setup_fee': 'true',
          'setup_fee_amount': '270',
        },
        'allow_promotion_codes': true,
      };

      print('üîµ Donn√©es checkout: $checkoutData');

      final sessionRef = await _firestore
          .collection('customers')
          .doc(user.uid)
          .collection('checkout_sessions')
          .add(checkoutData);

      print('üîµ Session cr√©√©e avec ID: ${sessionRef.id}');

      return await _waitForCheckoutUrl(user.uid, sessionRef.id);
    } catch (e) {
      print('‚ùå Erreur cr√©ation checkout mensuel: $e');
      rethrow;
    }
  }

  // Version avec ID - CORRIG√âE
  Future<Map<String, String>?> createMonthlyOptionCheckoutWithId({
    required String userType,
    required String successUrl,
    required String cancelUrl,
  }) async {
    try {
      print(
          'üîµ Cr√©ation checkout mensuel avec ID pour user: ${_auth.currentUser?.uid}');

      final user = _auth.currentUser;
      if (user == null) throw Exception('Utilisateur non connect√©');

      // S'assurer que le document customer existe
      await _ensureCustomerDocument(user.uid, user.email!);

      final successUrlWithAutoClose =
          'https://app.ventemoi.fr/stripe-success.html';
      final cancelUrlWithAutoClose =
          'https://app.ventemoi.fr/stripe-cancel.html';

      final checkoutData = {
        'mode': 'subscription',
        'customer_email': user.email, // ‚Üê Utiliser email au lieu de customer ID
        'success_url': successUrlWithAutoClose,
        'cancel_url': cancelUrlWithAutoClose,
        'line_items': [
          // Frais d'adh√©sion visibles
          {
            'price_data': {
              'currency': 'eur',
              'product_data': {
                'name': 'Frais d\'adh√©sion VenteMoi (unique)',
                'description': 'Acc√®s √† la plateforme pour votre √©tablissement',
              },
              'unit_amount': 27000, // 270‚Ç¨
            },
            'quantity': 1,
          },
          // Abonnement mensuel
          {
            'price': PRICE_ID_MONTHLY_RECURRING, // 55‚Ç¨/mois
            'quantity': 1,
          }
        ],
        'subscription_data': {
          'metadata': {
            'user_type': userType,
            'user_id': user.uid,
            'subscription_type': 'monthly_with_setup',
          },
        },
        'metadata': {
          'purchase_type': 'first_year_monthly',
          'user_type': userType,
          'user_id': user.uid,
          'includes_setup_fee': 'true',
        },
        'allow_promotion_codes': true,
        'created': FieldValue.serverTimestamp(),
      };

      final sessionRef = await _firestore
          .collection('customers')
          .doc(user.uid)
          .collection('checkout_sessions')
          .add(checkoutData);

      final firestoreDocId = sessionRef.id;
      print('üìÑ Document Firestore cr√©√©: $firestoreDocId');

      final url = await _waitForCheckoutUrl(user.uid, firestoreDocId);

      if (url != null) {
        return {
          'url': url,
          'sessionId': firestoreDocId,
        };
      }

      return null;
    } catch (e) {
      print('‚ùå Erreur cr√©ation checkout mensuel: $e');
      rethrow;
    }
  }

  // Cr√©er une session de checkout pour l'option annuelle - CORRIG√âE
  Future<Map<String, String>?> createAnnualOptionCheckoutWithId({
    required String userType,
    required String successUrl,
    required String cancelUrl,
  }) async {
    try {
      print(
          'üîµ Cr√©ation checkout annuel avec ID pour user: ${_auth.currentUser?.uid}');

      final user = _auth.currentUser;
      if (user == null) throw Exception('Utilisateur non connect√©');

      // S'assurer que le document customer existe
      await _ensureCustomerDocument(user.uid, user.email!);

      final successUrlWithAutoClose =
          'https://app.ventemoi.fr/stripe-success.html';
      final cancelUrlWithAutoClose =
          'https://app.ventemoi.fr/stripe-cancel.html';

      final checkoutData = {
        'mode': 'payment',
        'customer_email': user.email, // ‚Üê Utiliser email
        'success_url': successUrlWithAutoClose,
        'cancel_url': cancelUrlWithAutoClose,
        'line_items': [
          {
            'price': PRICE_ID_ANNUAL_FIRST_YEAR,
            'quantity': 1,
          }
        ],
        'metadata': {
          'purchase_type': 'first_year_annual',
          'user_type': userType,
          'user_id': user.uid,
          'needs_future_subscription': 'true',
          'future_price_id': PRICE_ID_ANNUAL_RECURRING,
        },
        'allow_promotion_codes': true,
        'created': FieldValue.serverTimestamp(),
      };

      final sessionRef = await _firestore
          .collection('customers')
          .doc(user.uid)
          .collection('checkout_sessions')
          .add(checkoutData);

      final sessionId = sessionRef.id;
      print('üîµ Session cr√©√©e avec ID: $sessionId');

      final url = await _waitForCheckoutUrl(user.uid, sessionId);

      if (url != null) {
        return {
          'url': url,
          'sessionId': sessionId,
        };
      }

      return null;
    } catch (e) {
      print('‚ùå Erreur cr√©ation checkout annuel: $e');
      rethrow;
    }
  }

  // Cr√©er une session de checkout pour un slot additionnel - CORRIG√âE
  Future<Map<String, String>?> createAdditionalSlotCheckoutWithId({
    required String successUrl,
    required String cancelUrl,
  }) async {
    try {
      final user = _auth.currentUser;
      if (user == null) throw Exception('Utilisateur non connect√©');

      // S'assurer que le document customer existe
      await _ensureCustomerDocument(user.uid, user.email!);

      final successUrlWithAutoClose =
          'https://app.ventemoi.fr/stripe-success.html';
      final cancelUrlWithAutoClose =
          'https://app.ventemoi.fr/stripe-cancel.html';

      final tempSessionId = DateTime.now().millisecondsSinceEpoch.toString();

      final checkoutData = {
        'mode': 'payment',
        'customer_email': user.email, // ‚Üê Utiliser email
        'success_url': successUrlWithAutoClose,
        'cancel_url': cancelUrlWithAutoClose,
        'line_items': [
          {
            'price_data': {
              'currency': 'eur',
              'product_data': {
                'name': 'Slot de cat√©gorie suppl√©mentaire',
                'description':
                    'Permet d\'ajouter une cat√©gorie d\'entreprise suppl√©mentaire',
              },
              'unit_amount': 5000, // 50‚Ç¨ en centimes
            },
            'quantity': 1,
          }
        ],
        'metadata': {
          'type': 'additional_category_slot',
          'user_id': user.uid,
          'purchase_type': 'category_slot',
          'temp_session_id': tempSessionId,
          'timestamp': DateTime.now().millisecondsSinceEpoch.toString(),
        },
        'allow_promotion_codes': true,
        'created': FieldValue.serverTimestamp(),
      };

      final sessionRef = await _firestore
          .collection('customers')
          .doc(user.uid)
          .collection('checkout_sessions')
          .add(checkoutData);

      final sessionId = sessionRef.id;
      print('üìÑ Document Firestore cr√©√©: $sessionId');

      final url = await _waitForCheckoutUrl(user.uid, sessionId);

      if (url != null) {
        return {
          'url': url,
          'sessionId': sessionId,
        };
      }

      return null;
    } catch (e) {
      print('‚ùå Erreur cr√©ation checkout slot: $e');
      rethrow;
    }
  }

  // Nouvelle m√©thode pour s'assurer que le document customer existe
  Future<void> _ensureCustomerDocument(String uid, String email) async {
    try {
      final customerDoc =
          await _firestore.collection('customers').doc(uid).get();

      if (!customerDoc.exists) {
        print('üìù Cr√©ation du document customer...');
        await _firestore.collection('customers').doc(uid).set({
          'email': email,
          'created': FieldValue.serverTimestamp(),
        });
      }
    } catch (e) {
      print('‚ö†Ô∏è Erreur cr√©ation document customer: $e');
    }
  }

  // Le reste du code reste identique...
  // (toutes les autres m√©thodes restent les m√™mes)

  // Attendre que l'URL de checkout soit g√©n√©r√©e par l'extension Stripe
  Future<String?> _waitForCheckoutUrl(
      String customerId, String sessionId) async {
    print('‚è≥ En attente de l\'URL de checkout...');

    const maxAttempts = 20;
    const delayBetweenAttempts = Duration(seconds: 2);

    for (int i = 0; i < maxAttempts; i++) {
      try {
        final sessionDoc = await _firestore
            .collection('customers')
            .doc(customerId)
            .collection('checkout_sessions')
            .doc(sessionId)
            .get();

        if (sessionDoc.exists) {
          final data = sessionDoc.data()!;

          // Debug: afficher les champs disponibles
          print(
              'üîç Tentative ${i + 1}/$maxAttempts - Data: ${data.keys.join(', ')}');

          // V√©rifier si l'extension a ajout√© une erreur
          if (data.containsKey('error')) {
            final error = data['error'];
            print('‚ùå Erreur Stripe: $error');
            throw Exception('Erreur Stripe: ${error['message'] ?? error}');
          }

          // L'extension Stripe ajoute le champ 'url' automatiquement
          if (data.containsKey('url') && data['url'] != null) {
            final url = data['url'] as String;
            print('‚úÖ URL de checkout obtenue: $url');
            return url;
          }

          // V√©rifier aussi sessionId (certaines versions utilisent ce champ)
          if (data.containsKey('sessionId') && data['sessionId'] != null) {
            // Construire l'URL manuellement si n√©cessaire
            final sessionId = data['sessionId'] as String;
            final url = 'https://checkout.stripe.com/pay/$sessionId';
            print('‚úÖ URL construite depuis sessionId: $url');
            return url;
          }
        }

        await Future.delayed(delayBetweenAttempts);
      } catch (e) {
        print('‚ùå Erreur lors de la v√©rification: $e');
        if (i == maxAttempts - 1) rethrow;
      }
    }

    // Si on arrive ici, c'est qu'on a d√©pass√© le timeout
    final sessionDoc = await _firestore
        .collection('customers')
        .doc(customerId)
        .collection('checkout_sessions')
        .doc(sessionId)
        .get();

    final debugData =
        sessionDoc.exists ? sessionDoc.data() : 'Document non trouv√©';

    throw Exception('''
 Timeout: URL de checkout non g√©n√©r√©e.
 √âtat final: $debugData

 V√©rifiez que:
 1. L'extension Stripe est correctement install√©e et configur√©e
 2. Les Cloud Functions de l'extension sont actives
 3. Les prix Stripe existent et sont actifs dans votre dashboard
 4. Le webhook Stripe est correctement configur√©
 5. La cl√© API Stripe a les permissions n√©cessaires
 ''');
  }

  // Lancer l'URL de checkout dans le navigateur
  Future<void> launchCheckout(String checkoutUrl) async {
    final uri = Uri.parse(checkoutUrl);

    if (await canLaunchUrl(uri)) {
      await launchUrl(
        uri,
        mode: LaunchMode.externalApplication,
        webOnlyWindowName: '_blank', // ‚Üê Ouverture dans un nouvel onglet
      );
    } else {
      throw Exception('Impossible d\'ouvrir l\'URL de checkout');
    }
  }

  // V√©rifier le statut de l'abonnement
  Future<Map<String, dynamic>?> checkSubscriptionStatus() async {
    final user = _auth.currentUser;
    if (user == null) return null;

    try {
      final customerDoc =
          await _firestore.collection('customers').doc(user.uid).get();

      if (customerDoc.exists) {
        final subscriptions = await _firestore
            .collection('customers')
            .doc(user.uid)
            .collection('subscriptions')
            .where('status', whereIn: ['trialing', 'active'])
            .limit(1)
            .get();

        if (subscriptions.docs.isNotEmpty) {
          return subscriptions.docs.first.data();
        }
      }
    } catch (e) {
      print('Erreur v√©rification abonnement: $e');
    }

    return null;
  }

  // ==== NOUVELLES M√âTHODES POUR PAYMENT LISTENER ====

  // √âcouter les sessions de paiement
  Stream<QuerySnapshot> listenToPaymentSessions(String userId) {
    return _firestore
        .collection('customers')
        .doc(userId)
        .collection('checkout_sessions')
        // Ne pas filtrer ici - on veut voir TOUS les changements
        .orderBy('created', descending: true)
        .limit(10) // Limiter aux 10 derni√®res sessions
        .snapshots();
  }

  // Dans StripeService
  Future<void> handleSuccessfulPayment(DocumentSnapshot sessionDoc) async {
    try {
      final sessionData = sessionDoc.data() as Map<String, dynamic>;
      final metadata = sessionData['metadata'] as Map<String, dynamic>?;

      if (metadata == null) {
        print('‚ùå Pas de metadata dans la session');
        return;
      }

      final userId = metadata['user_id'] as String?;
      final purchaseType = metadata['purchase_type'] as String?;
      final paymentType = metadata['type'] as String?;

      print('üéâ handleSuccessfulPayment appel√©:');
      print('   - userId: $userId');
      print('   - purchaseType: $purchaseType');
      print('   - paymentType: $paymentType');
      print('   - metadata: ${metadata.toString()}');

      // V√©rifier si c'est un paiement de slot
      if (purchaseType == 'category_slot' ||
          paymentType == 'additional_category_slot') {
        print('üì¶ C\'est un paiement de slot!');

        // Trouver l'√©tablissement
        final estabQuery = await _firestore
            .collection('establishments')
            .where('user_id', isEqualTo: userId)
            .limit(1)
            .get();

        if (estabQuery.docs.isEmpty) {
          print('‚ùå Aucun √©tablissement trouv√© pour user: $userId');
          return;
        }

        final establishmentDoc = estabQuery.docs.first;
        final establishmentId = establishmentDoc.id;
        final currentData = establishmentDoc.data();
        final currentSlots = currentData['enterprise_category_slots'] ?? 2;

        print('üè¢ √âtablissement trouv√©: $establishmentId');
        print('   - Slots actuels: $currentSlots');

        // Incr√©menter les slots
        await _firestore
            .collection('establishments')
            .doc(establishmentId)
            .update({
          'enterprise_category_slots': currentSlots + 1,
          'last_slot_purchase': FieldValue.serverTimestamp(),
        });

        print('‚úÖ Slot ajout√© avec succ√®s! Nouveau total: ${currentSlots + 1}');
      }

      // Marquer la session comme trait√©e
      await sessionDoc.reference.update({
        'processed': true,
        'processed_at': FieldValue.serverTimestamp(),
      });
    } catch (e) {
      print('‚ùå Erreur dans handleSuccessfulPayment: $e');
      print('   Stack: ${e.toString()}');
      rethrow;
    }
  }

  // Cr√©er un bon cadeau de bienvenue
  Future<void> _createWelcomeGiftVoucher(String establishmentId) async {
    try {
      // Cr√©er le bon cadeau
      await _firestore.collection('gift_vouchers').add({
        'establishment_id': establishmentId,
        'amount': 50.0,
        'type': 'welcome',
        'status': 'active',
        'created_at': FieldValue.serverTimestamp(),
        'expires_at':
            Timestamp.fromDate(DateTime.now().add(const Duration(days: 365))),
        'code': 'WELCOME-${DateTime.now().millisecondsSinceEpoch}',
      });

      print('üéÅ Bon cadeau de bienvenue cr√©√©');
    } catch (e) {
      print('‚ùå Erreur cr√©ation bon cadeau: $e');
    }
  }

  // Cr√©er une session de paiement pour un slot additionnel
  Future<String?> createAdditionalSlotCheckout({
    required String successUrl,
    required String cancelUrl,
  }) async {
    try {
      final customerId = await _ensureStripeCustomer();

      final successUrlWithAutoClose =
          'https://app.ventemoi.fr/stripe-success.html';
      final cancelUrlWithAutoClose =
          'https://app.ventemoi.fr/stripe-cancel.html';

      final checkoutData = {
        'mode': 'subscription',
        'success_url': successUrlWithAutoClose,
        'cancel_url': cancelUrlWithAutoClose,
        'line_items': [
          {
            'price': PRICE_ID_ADDITIONAL_SLOT,
            'quantity': 1,
          }
        ],
        'metadata': {
          'type': 'additional_category_slot',
          'user_id': customerId,
          'purchase_type': 'category_slot',
        },
        'allow_promotion_codes': true,
      };

      final sessionRef = await _firestore
          .collection('customers')
          .doc(customerId)
          .collection('checkout_sessions')
          .add(checkoutData);

      return await _waitForCheckoutUrl(customerId, sessionRef.id);
    } catch (e) {
      print('‚ùå Erreur cr√©ation checkout slot: $e');
      rethrow;
    }
  }

  // M√©thode de debug pour v√©rifier la configuration
  Future<void> debugStripeSetup() async {
    print('\nüîç === DEBUG STRIPE SETUP ===\n');

    final user = _auth.currentUser;
    if (user == null) {
      print('‚ùå Aucun utilisateur connect√©');
      return;
    }

    print('üë§ Utilisateur: ${user.uid}');
    print('üìß Email: ${user.email}');

    // V√©rifier le customer
    final customerDoc =
        await _firestore.collection('customers').doc(user.uid).get();

    if (customerDoc.exists) {
      final data = customerDoc.data()!;
      print('\n‚úÖ Document customer existe:');
      print('   - stripeId: ${data['stripeId'] ?? 'NON D√âFINI'}');
      print('   - email: ${data['email']}');
      print('   - created: ${data['created']}');

      if (data['stripeId'] == null) {
        print('\n‚ö†Ô∏è  ATTENTION: Le stripeId est manquant!');
        print('   L\'extension Stripe n\'a pas cr√©√© le customer.');
        print('   V√©rifiez la configuration de l\'extension.');
      }
    } else {
      print('\n‚ùå Document customer n\'existe pas');
    }

    print('\n=== FIN DEBUG ===\n');
  }

  // M√©thode de diagnostic pour tester les Cloud Functions
  Future<void> testCloudFunction() async {
    final user = FirebaseAuth.instance.currentUser;
    if (user == null) return;

    print('üß™ Test Cloud Function...');

    // Supprimer l'ancien document s'il existe
    final ref =
        FirebaseFirestore.instance.collection('customers').doc(user.uid);

    await ref.delete();
    print('üóëÔ∏è Ancien document supprim√©');

    // Cr√©er un nouveau document
    await ref.set({
      'email': user.email!,
      'created': FieldValue.serverTimestamp(),
    });

    print('üìù Nouveau document cr√©√©');
    print('‚è≥ Attente de la Cloud Function...');

    // Attendre et v√©rifier
    for (int i = 0; i < 10; i++) {
      await Future.delayed(Duration(seconds: 2));

      final doc = await ref.get();
      if (doc.exists) {
        final data = doc.data()!;
        if (data.containsKey('stripeId')) {
          print('‚úÖ SUCCESS! stripeId: ${data['stripeId']}');
          return;
        }
        if (data.containsKey('error')) {
          print('‚ùå ERREUR: ${data['error']}');
          return;
        }
      }
      print('   Tentative ${i + 1}/10...');
    }

    print('‚è±Ô∏è Timeout - v√©rifiez les logs Cloud Functions');
  }

  // Ajouter ces m√©thodes dans la classe StripeService (lib/core/models/stripe_service.dart)

  // M√©thode pour forcer la mise √† jour du statut (en cas d'urgence)
  Future<void> forceCheckSessionStatus(String sessionId) async {
    print('üîÑ For√ßage de la v√©rification du statut...');

    final user = _auth.currentUser;
    if (user == null) return;

    try {
      // R√©cup√©rer la session
      final sessionRef = _firestore
          .collection('customers')
          .doc(user.uid)
          .collection('checkout_sessions')
          .doc(sessionId);

      final sessionDoc = await sessionRef.get();
      if (!sessionDoc.exists) {
        print('‚ùå Session introuvable');
        return;
      }

      final data = sessionDoc.data()!;

      // Si la session a un payment_intent mais pas de payment_status
      if (data['payment_intent'] != null && data['payment_status'] == null) {
        print('‚ö†Ô∏è Session avec payment_intent mais sans payment_status');
        print('   ‚Üí Mise √† jour forc√©e du statut');

        await sessionRef.update({
          'payment_status': 'paid',
          'status': 'complete',
          'force_updated': true,
          'force_updated_at': FieldValue.serverTimestamp(),
        });

        print('‚úÖ Statut forc√© √† "paid"');
      } else {
        print('‚ÑπÔ∏è Session d√©j√† √† jour ou pas de payment_intent');
      }
    } catch (e) {
      print('‚ùå Erreur force update: $e');
    }
  }

  // M√©thode pour v√©rifier via Cloud Function (optionnelle)
  // Note: Cette m√©thode n√©cessite le d√©ploiement d'une Cloud Function
  Future<bool> verifyPaymentViaCloudFunction(String sessionId) async {
    try {
      print('‚òÅÔ∏è Tentative de v√©rification via Cloud Function...');

      // Si vous n'avez pas de Cloud Function d√©ploy√©e, retournez false
      // Cette m√©thode est un placeholder pour une future impl√©mentation

      // Pour impl√©menter cette fonctionnalit√© :
      // 1. D√©ployez la Cloud Function fournie pr√©c√©demment
      // 2. Remplacez ce code par l'appel r√©el √† la fonction

      // Exemple d'impl√©mentation (d√©commentez si vous avez la Cloud Function) :
      /*
        final HttpsCallable callable = FirebaseFunctions
            .instanceFor(region: 'europe-west1')
            .httpsCallable('verifyPaymentStatus');

        final result = await callable.call({
          'sessionId': sessionId,
        });

        final data = result.data as Map<String, dynamic>;
        print('‚òÅÔ∏è R√©sultat: ${data['success']} - Status: ${data['status']}');

        return data['success'] == true;
        */

      // Pour l'instant, retourner false car non impl√©ment√©
      print('‚ö†Ô∏è Cloud Function non impl√©ment√©e, utilisation du fallback');
      return false;
    } catch (e) {
      print('‚ùå Erreur Cloud Function: $e');
      return false;
    }
  }

  // M√©thode utilitaire pour v√©rifier si un paiement est r√©ussi
  Future<bool> checkPaymentSuccess(String sessionId) async {
    final user = _auth.currentUser;
    if (user == null) return false;

    try {
      final sessionDoc = await _firestore
          .collection('customers')
          .doc(user.uid)
          .collection('checkout_sessions')
          .doc(sessionId)
          .get();

      if (!sessionDoc.exists) return false;

      final data = sessionDoc.data()!;

      // V√©rifier plusieurs indicateurs de succ√®s
      final paymentStatus = data['payment_status'] as String?;
      final status = data['status'] as String?;
      final paymentIntent = data['payment_intent'] as String?;
      final subscription = data['subscription'] as String?;
      final invoice = data['invoice'] as String?;
      final amountTotal = data['amount_total'] as int?;

      final isPaid = (paymentStatus == 'paid' ||
              paymentStatus == 'succeeded') ||
          (status == 'complete' || status == 'paid' || status == 'success') ||
          (paymentIntent != null || subscription != null || invoice != null);

      final hasAmount = amountTotal != null && amountTotal > 0;

      return isPaid && hasAmount;
    } catch (e) {
      print('Erreur v√©rification paiement: $e');
      return false;
    }
  }

  // Ajoutez ces m√©thodes dans votre classe StripeService (lib/core/models/stripe_service.dart)

  // M√©thode de v√©rification am√©lior√©e avec retry
  Future<bool> checkPaymentStatusWithRetry(String sessionId,
      {int maxRetries = 3}) async {
    final user = _auth.currentUser;
    if (user == null) return false;

    for (int i = 0; i < maxRetries; i++) {
      try {
        // 1. V√©rifier la session checkout
        final sessionDoc = await _firestore
            .collection('customers')
            .doc(user.uid)
            .collection('checkout_sessions')
            .doc(sessionId)
            .get();

        if (!sessionDoc.exists) {
          print(
              '‚ùå Session $sessionId introuvable (tentative ${i + 1}/$maxRetries)');
          await Future.delayed(Duration(seconds: 2));
          continue;
        }

        final data = sessionDoc.data()!;

        // 2. V√©rifier plusieurs indicateurs de succ√®s
        final paymentStatus = data['payment_status'] as String?;
        final status = data['status'] as String?;
        final paymentIntent = data['payment_intent'] as String?;
        final subscription = data['subscription'] as String?;
        final invoice = data['invoice'] as String?;

        // Debug
        print('üîç Session $sessionId - Tentative ${i + 1}:');
        print('   payment_status: $paymentStatus');
        print('   status: $status');
        print('   payment_intent: ${paymentIntent != null ? '‚úÖ' : '‚ùå'}');
        print('   subscription: ${subscription != null ? '‚úÖ' : '‚ùå'}');
        print('   invoice: ${invoice != null ? '‚úÖ' : '‚ùå'}');

        // Succ√®s si un de ces crit√®res est rempli
        if (paymentStatus == 'paid' ||
            paymentStatus == 'succeeded' ||
            status == 'complete' ||
            status == 'paid' ||
            status == 'success' ||
            paymentIntent != null ||
            subscription != null ||
            invoice != null) {
          print('‚úÖ Paiement confirm√©!');
          return true;
        }

        // 3. V√©rifier aussi directement l'abonnement/√©tablissement
        final estabQuery = await _firestore
            .collection('establishments')
            .where('user_id', isEqualTo: user.uid)
            .limit(1)
            .get();

        if (estabQuery.docs.isNotEmpty) {
          final hasActiveSubscription =
              estabQuery.docs.first.data()['has_active_subscription'] ?? false;

          if (hasActiveSubscription) {
            print('‚úÖ Abonnement actif d√©tect√© dans l\'√©tablissement!');

            // Mettre √† jour la session pour coh√©rence
            try {
              await sessionDoc.reference.update({
                'payment_status': 'paid',
                'updated_by_app': true,
                'updated_at': FieldValue.serverTimestamp(),
              });
            } catch (e) {
              print('‚ö†Ô∏è Impossible de mettre √† jour la session: $e');
            }

            return true;
          }
        }

        // 4. Si on a des champs Stripe mais pas de statut, c'est probablement un succ√®s
        if ((paymentIntent != null ||
                subscription != null ||
                invoice != null) &&
            paymentStatus == null &&
            i == maxRetries - 1) {
          print(
              '‚ö†Ô∏è Session avec donn√©es Stripe mais sans statut - consid√©r√©e comme r√©ussie');
          return true;
        }

        await Future.delayed(Duration(seconds: 2));
      } catch (e) {
        print('‚ùå Erreur v√©rification (tentative ${i + 1}): $e');
      }
    }

    return false;
  }

  // Forcer la mise √† jour du statut de paiement
  Future<void> forceUpdatePaymentStatus(String sessionId) async {
    final user = _auth.currentUser;
    if (user == null) return;

    print('üîÑ For√ßage de la mise √† jour du statut pour session: $sessionId');

    try {
      // 1. R√©cup√©rer la session
      final sessionRef = _firestore
          .collection('customers')
          .doc(user.uid)
          .collection('checkout_sessions')
          .doc(sessionId);

      final sessionDoc = await sessionRef.get();

      if (!sessionDoc.exists) {
        print('‚ùå Session introuvable: $sessionId');
        return;
      }

      final data = sessionDoc.data()!;

      // 2. V√©rifier si on a des indicateurs de paiement
      final hasPaymentIndicators = data['payment_intent'] != null ||
          data['subscription'] != null ||
          data['invoice'] != null;

      // 3. V√©rifier l'√©tablissement
      final estabQuery = await _firestore
          .collection('establishments')
          .where('user_id', isEqualTo: user.uid)
          .limit(1)
          .get();

      final hasActiveSubscription = estabQuery.docs.isNotEmpty &&
          (estabQuery.docs.first.data()['has_active_subscription'] ?? false);

      // 4. Forcer la mise √† jour si n√©cessaire
      if ((hasPaymentIndicators || hasActiveSubscription) &&
          data['payment_status'] != 'paid') {
        print('‚ö†Ô∏è Indicateurs de paiement trouv√©s mais statut incorrect');
        print('   ‚Üí Mise √† jour forc√©e du statut');

        await sessionRef.update({
          'payment_status': 'paid',
          'status': 'complete',
          'force_updated': true,
          'force_updated_at': FieldValue.serverTimestamp(),
          'force_update_reason': hasActiveSubscription
              ? 'Active subscription detected'
              : 'Payment indicators present',
        });

        print('‚úÖ Statut forc√© √† "paid"');
      } else if (!hasPaymentIndicators && !hasActiveSubscription) {
        print('‚ùå Aucun indicateur de paiement trouv√©');
      } else {
        print('‚úÖ Statut d√©j√† correct');
      }
    } catch (e) {
      print('‚ùå Erreur force update: $e');
    }
  }

  // M√©thode de debug am√©lior√©e
  Future<void> debugCheckoutSession(String sessionId) async {
    print('\nüîç === DEBUG CHECKOUT SESSION ===\n');

    final user = _auth.currentUser;
    if (user == null) {
      print('‚ùå Aucun utilisateur connect√©');
      return;
    }

    try {
      // 1. V√©rifier la session
      final sessionDoc = await _firestore
          .collection('customers')
          .doc(user.uid)
          .collection('checkout_sessions')
          .doc(sessionId)
          .get();

      if (!sessionDoc.exists) {
        print('‚ùå Session introuvable: $sessionId');
        print('   User ID: ${user.uid}');
        return;
      }

      final data = sessionDoc.data()!;
      print('üìÑ Session trouv√©e:');
      print('   ID: $sessionId');
      print('   User: ${user.uid}');

      // 2. Afficher tous les champs
      print('\nüìä Donn√©es de la session:');
      data.forEach((key, value) {
        if (value is Map) {
          print('   $key:');
          value.forEach((k, v) {
            print('      $k: $v');
          });
        } else if (value is Timestamp) {
          print('   $key: ${value.toDate()}');
        } else if (value is List) {
          print('   $key: [${value.length} √©l√©ments]');
        } else {
          print('   $key: $value');
        }
      });

      // 3. Analyse des champs critiques
      print('\nüîé Analyse du statut:');

      final hasUrl = data.containsKey('url') && data['url'] != null;
      final hasPaymentStatus =
          data.containsKey('payment_status') && data['payment_status'] != null;
      final hasStatus = data.containsKey('status') && data['status'] != null;
      final hasPaymentIntent =
          data.containsKey('payment_intent') && data['payment_intent'] != null;
      final hasSubscription =
          data.containsKey('subscription') && data['subscription'] != null;
      final hasInvoice = data.containsKey('invoice') && data['invoice'] != null;
      final hasError = data.containsKey('error') && data['error'] != null;
      final hasAmountTotal =
          data.containsKey('amount_total') && data['amount_total'] != null;

      print('   ‚úì URL g√©n√©r√©e: ${hasUrl ? '‚úÖ' : '‚ùå'}');
      print(
          '   ‚úì payment_status: ${hasPaymentStatus ? '‚úÖ (${data['payment_status']})' : '‚ùå'}');
      print('   ‚úì status: ${hasStatus ? '‚úÖ (${data['status']})' : '‚ùå'}');
      print('   ‚úì payment_intent: ${hasPaymentIntent ? '‚úÖ' : '‚ùå'}');
      print('   ‚úì subscription: ${hasSubscription ? '‚úÖ' : '‚ùå'}');
      print('   ‚úì invoice: ${hasInvoice ? '‚úÖ' : '‚ùå'}');
      print(
          '   ‚úì amount_total: ${hasAmountTotal ? '‚úÖ (${data['amount_total']} centimes)' : '‚ùå'}');
      print('   ‚úì Erreur: ${hasError ? '‚ùå ${data['error']}' : '‚úÖ Aucune'}');

      // 4. V√©rifier l'√©tablissement
      print('\nüè¢ V√©rification de l\'√©tablissement:');
      final estabQuery = await _firestore
          .collection('establishments')
          .where('user_id', isEqualTo: user.uid)
          .limit(1)
          .get();

      if (estabQuery.docs.isNotEmpty) {
        final estabData = estabQuery.docs.first.data();
        print('   ID: ${estabQuery.docs.first.id}');
        print(
            '   has_active_subscription: ${estabData['has_active_subscription'] ?? 'non d√©fini'}');
        print(
            '   subscription_type: ${estabData['subscription_type'] ?? 'non d√©fini'}');
        print(
            '   subscription_end_date: ${estabData['subscription_end_date']?.toDate() ?? 'non d√©fini'}');
      } else {
        print('   ‚ùå Aucun √©tablissement trouv√© pour cet utilisateur');
      }

      // 5. Diagnostic
      print('\nüí° Diagnostic:');

      if (hasPaymentStatus && data['payment_status'] == 'paid') {
        print('   ‚úÖ Paiement confirm√© par Stripe');
      } else if (hasPaymentIntent || hasSubscription || hasInvoice) {
        print(
            '   ‚ö†Ô∏è Indicateurs de paiement pr√©sents mais statut non mis √† jour');
        print('   ‚Üí Essayez forceUpdatePaymentStatus()');
      } else if (hasError) {
        print('   ‚ùå Erreur Stripe d√©tect√©e');
      } else if (!hasUrl) {
        print('   ‚è≥ Session en cours de cr√©ation (URL non g√©n√©r√©e)');
      } else {
        print('   ‚è≥ En attente du webhook Stripe');
      }

      // 6. Recommandations
      print('\nüìã Actions recommand√©es:');

      if (!hasPaymentStatus && (hasPaymentIntent || hasSubscription)) {
        print('   1. V√©rifier la configuration des webhooks Stripe');
        print('   2. V√©rifier les logs des Cloud Functions');
        print('   3. Utiliser forceUpdatePaymentStatus() si n√©cessaire');
      }

      if (hasError) {
        print('   1. V√©rifier les d√©tails de l\'erreur ci-dessus');
        print('   2. V√©rifier la configuration Stripe (prix, produits)');
        print('   3. Tester avec une nouvelle session');
      }
    } catch (e) {
      print('‚ùå Erreur debug: $e');
    }

    print('\n=== FIN DEBUG ===\n');
  }

  // Dans lib/core/models/stripe_service.dart

  // Cr√©er une session de checkout pour un slot de cat√©gorie
  Future<Map<String, String>?> createCategorySlotCheckout({
    required String categoryId,
    required String establishmentId,
  }) async {
    try {
      print('üîµ Cr√©ation checkout slot pour cat√©gorie: $categoryId');

      final customerId = await _ensureStripeCustomer();

      // URLs de redirection
      final successUrl = 'https://app.ventemoi.fr/stripe-success.html';
      final cancelUrl = 'https://app.ventemoi.fr/stripe-cancel.html';

      // G√©n√©rer un ID unique temporaire pour le tracking
      final tempSessionId = DateTime.now().millisecondsSinceEpoch.toString();

      // Donn√©es de la session avec price_data au lieu de price
      final checkoutData = {
        'mode': 'payment',
        'success_url': successUrl,
        'cancel_url': cancelUrl,
        'line_items': [
          {
            'price_data': {
              'currency': 'eur',
              'product_data': {
                'name': 'Slot de cat√©gorie suppl√©mentaire',
                'description':
                    'Permet d\'ajouter une cat√©gorie d\'entreprise suppl√©mentaire',
              },
              'unit_amount': 5000, // 50‚Ç¨ en centimes
            },
            'quantity': 1,
          }
        ],
        'metadata': {
          'type': 'slot_purchase',
          'purchase_type': 'category_slot',
          'category_id': categoryId,
          'establishment_id': establishmentId,
          'user_id': customerId,
          'temp_session_id': tempSessionId,
          'timestamp': DateTime.now().millisecondsSinceEpoch.toString(),
        },
        'allow_promotion_codes': true,
        'created': FieldValue.serverTimestamp(),
      };

      // Cr√©er la session avec toutes les donn√©es
      final sessionRef = await _firestore
          .collection('customers')
          .doc(customerId)
          .collection('checkout_sessions')
          .add(checkoutData);

      final sessionId = sessionRef.id;

      print('üìÑ Document Firestore cr√©√©: $sessionId');

      // Attendre que l'URL soit g√©n√©r√©e
      final url = await _waitForCheckoutUrl(customerId, sessionId);

      if (url != null) {
        return {
          'url': url,
          'sessionId': sessionId,
        };
      }

      return null;
    } catch (e) {
      print('‚ùå Erreur cr√©ation checkout slot: $e');
      rethrow;
    }
  }

  Future<String?> syncStripeCustomer() async {
    try {
      final user = _auth.currentUser;
      if (user == null) throw Exception('Utilisateur non connect√©');

      print('üîÑ Synchronisation du customer Stripe...');

      // Appeler la Cloud Function
      final HttpsCallable callable =
          FirebaseFunctions.instanceFor(region: 'europe-west1')
              .httpsCallable('syncExistingCustomer');

      final result = await callable.call();
      final data = result.data as Map<String, dynamic>;

      if (data['success'] == true && data['customerId'] != null) {
        print('‚úÖ Customer synchronis√©: ${data['customerId']}');
        return data['customerId'];
      }

      throw Exception('√âchec de la synchronisation');
    } catch (e) {
      print('‚ùå Erreur sync customer: $e');
      // Fallback : utiliser l'email
      return null;
    }
  }
}
