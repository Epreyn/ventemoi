// lib/utils/enterprise_category_migration.dart

import 'package:cloud_firestore/cloud_firestore.dart';

class EnterpriseCategoryMigration {
  final FirebaseFirestore firestore;

  EnterpriseCategoryMigration(this.firestore);

  Future<void> migrateExistingCategories() async {
    print('üîÑ D√©but de la migration des cat√©gories entreprise...');

    final batch = firestore.batch();
    final snapshot = await firestore.collection('enterprise_categories').get();

    int count = 0;
    for (final doc in snapshot.docs) {
      final data = doc.data();

      // Ajouter les nouveaux champs s'ils n'existent pas
      if (!data.containsKey('parent_id') || !data.containsKey('level')) {
        batch.update(doc.reference, {
          'parent_id':
              null, // Toutes les cat√©gories existantes deviennent principales
          'level': 0, // Niveau 0 = cat√©gorie principale
        });
        count++;
      }
    }

    if (count > 0) {
      await batch.commit();
      print('‚úÖ Migration termin√©e : $count cat√©gories mises √† jour');
    } else {
      print('‚ÑπÔ∏è Aucune migration n√©cessaire');
    }
  }

  // Ajoutez ces m√©thodes dans la classe EnterpriseCategoryMigration

  // Cr√©er des exemples de sous-cat√©gories
  Future<void> createSampleSubcategories() async {
    print('üîÑ Cr√©ation d\'exemples de sous-cat√©gories...');

    // R√©cup√©rer quelques cat√©gories principales
    final mainCategories = await firestore
        .collection('enterprise_categories')
        .where('level', isEqualTo: 0)
        .limit(3)
        .get();

    if (mainCategories.docs.isEmpty) {
      print('‚ö†Ô∏è Aucune cat√©gorie principale trouv√©e');
      return;
    }

    // Exemples de sous-cat√©gories par domaine
    final subcategoriesByDomain = {
      'B√¢timent': [
        'Plomberie',
        '√âlectricit√©',
        'Ma√ßonnerie',
        'Peinture',
        'Menuiserie',
        'Carrelage',
      ],
      'Services': [
        'Comptabilit√©',
        'Conseil juridique',
        'Marketing digital',
        'Ressources humaines',
        'Formation',
      ],
      'Commerce': [
        'Alimentation',
        'V√™tements',
        '√âlectronique',
        'D√©coration',
        'Cosm√©tiques',
      ],
    };

    for (final mainDoc in mainCategories.docs) {
      final mainData = mainDoc.data();
      final mainName = mainData['name'] as String;

      // Trouver les sous-cat√©gories correspondantes
      String? matchingKey;
      for (final key in subcategoriesByDomain.keys) {
        if (mainName.toLowerCase().contains(key.toLowerCase()) ||
            key.toLowerCase().contains(mainName.toLowerCase())) {
          matchingKey = key;
          break;
        }
      }

      if (matchingKey != null) {
        final subcategories = subcategoriesByDomain[matchingKey]!;
        int index = 1;

        for (final subcatName in subcategories) {
          await firestore.collection('enterprise_categories').add({
            'name': subcatName,
            'parent_id': mainDoc.id,
            'level': 1,
            'index': index++,
          });
        }

        print(
            '‚úÖ ${subcategories.length} sous-cat√©gories cr√©√©es pour "$mainName"');
      }
    }
  }

  // V√©rifier l'int√©grit√© des donn√©es
  Future<void> verifyDataIntegrity() async {
    print('üîç V√©rification de l\'int√©grit√© des donn√©es...');

    final allCategories =
        await firestore.collection('enterprise_categories').get();

    int mainCount = 0;
    int subCount = 0;
    final Map<String, int> subcategoriesByParent = {};
    final List<String> issues = [];

    for (final doc in allCategories.docs) {
      final data = doc.data();
      final parentId = data['parent_id'];
      final level = data['level'] ?? 0;

      if (parentId == null) {
        mainCount++;
      } else {
        subCount++;
        subcategoriesByParent[parentId] =
            (subcategoriesByParent[parentId] ?? 0) + 1;

        // V√©rifier que le parent existe
        final parentExists = allCategories.docs.any((d) => d.id == parentId);

        if (!parentExists) {
          issues.add(
              '‚ö†Ô∏è Sous-cat√©gorie "${data['name']}" a un parent inexistant');
        }
      }

      // V√©rifier la coh√©rence du niveau
      if (parentId == null && level != 0) {
        issues.add(
            '‚ö†Ô∏è Cat√©gorie principale "${data['name']}" a un niveau incorrect: $level');
      } else if (parentId != null && level != 1) {
        issues.add(
            '‚ö†Ô∏è Sous-cat√©gorie "${data['name']}" a un niveau incorrect: $level');
      }
    }

    print('\nüìä R√©sum√©:');
    print('- Cat√©gories principales: $mainCount');
    print('- Sous-cat√©gories: $subCount');
    print('- Total: ${allCategories.docs.length}');

    if (subcategoriesByParent.isNotEmpty) {
      print('\nüìÇ R√©partition des sous-cat√©gories:');
      for (final entry in subcategoriesByParent.entries) {
        final parentDoc =
            allCategories.docs.firstWhere((d) => d.id == entry.key);
        final parentName = parentDoc.data()['name'];
        print('  - $parentName: ${entry.value} sous-cat√©gories');
      }
    }

    if (issues.isNotEmpty) {
      print('\n‚ùå Probl√®mes d√©tect√©s:');
      for (final issue in issues) {
        print(issue);
      }
    } else {
      print('\n‚úÖ Aucun probl√®me d√©tect√©');
    }
  }

  // Script principal de migration
  Future<void> runFullMigration() async {
    print('üöÄ D√©marrage de la migration compl√®te\n');

    try {
      // √âtape 1: Migrer les cat√©gories existantes
      await migrateExistingCategories();

      // √âtape 2: Cr√©er des exemples (optionnel)
      print(
          '\nVoulez-vous cr√©er des exemples de sous-cat√©gories ? (Recommand√© pour tester)');
      // Dans un vrai script, demander confirmation √† l'utilisateur
      // await createSampleSubcategories();

      // √âtape 3: V√©rifier l'int√©grit√©
      await verifyDataIntegrity();

      print('\nüéâ Migration termin√©e avec succ√®s!');
    } catch (e) {
      print('\n‚ùå Erreur pendant la migration: $e');
      rethrow;
    }
  }
}
